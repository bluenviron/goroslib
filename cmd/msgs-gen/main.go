package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
)

var tplPackage = template.Must(template.New("").Parse(
	`// Package {{ .PkgName }} contains message definitions (autogenerated).
//nolint:golint
package {{ .PkgName }}
`))

var tplTest = template.Must(template.New("").Parse(
	`//nolint:golint
package {{ .PkgName }}

import (
	"testing"
)

func TestCompileOk(t *testing.T) {
}
`))

func shellCommand(cmdstr string) error {
	fmt.Fprintf(os.Stderr, "%s\n", cmdstr)
	cmd := exec.Command("sh", "-c", cmdstr)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	return cmd.Run()
}

func downloadJSON(addr string, data interface{}) error {
	req, err := http.NewRequest("GET", addr, nil)
	if err != nil {
		return err
	}

	res, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	return json.NewDecoder(res.Body).Decode(data)
}

type githubFile struct {
	Name        string
	URL         string
	DownloadURL string `json:"download_url"`
}

func processPackage(name string, addr string) error {
	fmt.Fprintf(os.Stderr, "[%s]\n", name)

	os.Mkdir(filepath.Join("pkg", "msgs", name), 0755)

	err := func() error {
		f, err := os.Create(filepath.Join("pkg", "msgs", name, "package.go"))
		if err != nil {
			return err
		}
		defer f.Close()

		return tplPackage.Execute(f, map[string]interface{}{
			"PkgName": name,
		})
	}()
	if err != nil {
		return err
	}

	err = func() error {
		f, err := os.Create(filepath.Join("pkg", "msgs", name, "package_test.go"))
		if err != nil {
			return err
		}
		defer f.Close()

		return tplTest.Execute(f, map[string]interface{}{
			"PkgName": name,
		})
	}()
	if err != nil {
		return err
	}

	var files []githubFile
	err = downloadJSON(addr, &files)
	if err != nil {
		return err
	}

	for _, f := range files {
		fileName := func() string {
			ur, _ := url.Parse(f.DownloadURL)
			return strings.TrimSuffix(filepath.Base(ur.Path), ".msg")
		}()

		err = shellCommand(fmt.Sprintf("go run ./cmd/msg-import --gopackage=%s --rospackage=%s %s > %s",
			name,
			name,
			f.DownloadURL,
			filepath.Join("pkg", "msgs", name, fileName+".go")))
		if err != nil {
			os.Remove(filepath.Join("pkg", "msgs", name, fileName+".go"))
			continue
		}
	}

	fmt.Fprintf(os.Stderr, "\n")
	return nil
}

func processCommonMsgs() error {
	var files []githubFile
	err := downloadJSON("https://api.github.com/repos/ros/common_msgs/contents", &files)
	if err != nil {
		return err
	}

	var packages [][2]string

	// get all folders which have the subfolder msg
	for _, f := range files {
		var subfiles []githubFile
		err := downloadJSON(f.URL, &subfiles)
		if err != nil {
			return err
		}

		msgDir := func() string {
			for _, f := range subfiles {
				if f.Name == "msg" {
					return f.URL
				}
			}
			return ""
		}()

		if msgDir == "" {
			continue
		}

		packages = append(packages, [2]string{f.Name, msgDir})
	}

	for _, p := range packages {
		err := processPackage(p[0], p[1])
		if err != nil {
			return err
		}
	}

	return nil
}

func run() error {
	err := shellCommand("rm -rf pkg/msgs/*/")
	if err != nil {
		return err
	}

	err = processPackage("std_msgs", "https://api.github.com/repos/ros/std_msgs/contents/msg")
	if err != nil {
		return err
	}

	err = processPackage("rosgraph_msgs", "https://api.github.com/repos/ros/ros_comm_msgs/contents/rosgraph_msgs/msg")
	if err != nil {
		return err
	}

	err = processCommonMsgs()
	if err != nil {
		return err
	}

	return nil
}

func main() {
	err := run()
	if err != nil {
		fmt.Fprintf(os.Stderr, "ERR: %s\n", err)
		os.Exit(1)
	}
}
