package conversion

import (
	"io"
	"text/template"

	"github.com/bluenviron/goroslib/v2/pkg/msgconv"
)

var tplMessage = template.Must(template.New("").Parse(
	`//autogenerated:yes
//nolint:revive,lll
package {{ .GoPkgName }}

import (
{{- range $k, $v := .Imports }}
    "{{ $k }}"
{{- end }}
)
{{ .Message }}
`))

// ImportMessage generates Go file from a .msg file and writes to the io.Writer.
func ImportMessage(u string, goPkgName string, rosPkgName string, w io.Writer) error {
	content, err := getContent(u)
	if err != nil {
		return err
	}

	msgDef, err := msgconv.ParseMessageDefinition(rosPkgName, getName(u, ".msg"), content)
	if err != nil {
		return err
	}

	message, err := msgDef.Write()
	if err != nil {
		return err
	}

	return tplMessage.Execute(w, map[string]interface{}{
		"GoPkgName":  goPkgName,
		"RosPkgName": rosPkgName,
		"Imports":    msgDef.Imports,
		"Message":    message,
	})
}
