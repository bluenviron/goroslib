package conversion

import (
	"io"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var tplMessage = template.Must(template.New("").Parse(
	`//autogenerated:yes
//nolint:revive,lll
package {{ .GoPkgName }}

import (
{{- range $k, $v := .Imports }}
    "{{ $k }}"
{{- end }}
)
{{ .Message }}
`))

// ImportMessage generates Go file from a .msg file and writes to the io.Writer.
func ImportMessage(path string, goPkgName string, rosPkgName string, w io.Writer) error {
	name := strings.TrimSuffix(filepath.Base(path), ".msg")

	buf, err := os.ReadFile(path)
	if err != nil {
		return err
	}
	content := string(buf)

	msgDef, err := parseMessageDefinition(rosPkgName, name, content)
	if err != nil {
		return err
	}

	message, err := msgDef.write()
	if err != nil {
		return err
	}

	return tplMessage.Execute(w, map[string]interface{}{
		"GoPkgName":  goPkgName,
		"RosPkgName": rosPkgName,
		"Imports":    msgDef.Imports,
		"Message":    message,
	})
}
